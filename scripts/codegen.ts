import path from 'path';

import type { CodegenConfig } from '@graphql-codegen/cli';

const config: CodegenConfig = {
    schema: path.resolve('../src/app/api/graphql/schema.graphql'), // This is generated by our SQL converter
    documents: path.resolve('../src/**/*.{ts,tsx,graphql}'), // Your GraphQL queries/mutations
    generates: {
        // Generate TypeScript types for the schema
        './src/types/graphql-types.ts': {
            plugins: ['typescript', 'typescript-resolvers'],
            config: {
                useIndexSignature: true,
                contextType: './context#Context',
                mappers: {
                    // Map GraphQL types to your database models
                    User: './models#UserModel',
                    Account: './models#AccountModel',
                    Session: './models#SessionModel',
                    ChartMetadata: './models#ChartMetadataModel',
                    // Add more mappings as needed
                },
            },
        },

        // Generate React hooks for client-side (if using React)
        './src/types/graphql-hooks.ts': {
            preset: 'client',
            plugins: [],
        },

        // Generate resolvers template
        './src/resolvers/generated-resolvers.ts': {
            plugins: ['typescript', 'typescript-resolvers'],
            config: {
                useIndexSignature: true,
                contextType: './context#Context',
                defaultMapper: 'Partial<{T}>',
            },
        },
    },
    hooks: {
        // Run our SQL converter before codegen
        beforeAllFileWrite: ['npm run convert-sql'],
    },
};

export default config;
